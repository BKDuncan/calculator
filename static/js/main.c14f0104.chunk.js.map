{"version":3,"sources":["components/Calculator.js","App.js","serviceWorker.js","index.js"],"names":["CalculatorButton","props","className","onClick","value","Calculator","useState","current","last","displayResult","displayString","setDisplayString","operation","result","lastResult","setLastResult","formatCalculation","calculation","insertMultiplication","implicitMultiplication","newCalc","match","replace","selectBtn","btnValue","length","eval","Number","isNaN","error","newCurrent","slice","clearBtn","backspaceBtn","newValue","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c14f0104.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport './calculator.css';\r\n\r\nconst CalculatorButton = props => (\r\n    <div className='btn-container'>\r\n        <button onClick={() => props.onClick(props.value)}>{props.value}</button>\r\n    </div>\r\n);\r\n\r\nconst Calculator = props => {\r\n    const [displayString, setDisplayString] = useState({\r\n        current: '0',\r\n        last: ' ',\r\n        displayResult: true\r\n    });\r\n\r\n    const [lastResult, setLastResult] = useState({\r\n        operation: '',\r\n        result: '0'\r\n    });\r\n\r\n    const formatCalculation = (calculation) => {\r\n        return insertMultiplication(calculation);\r\n    }\r\n\r\n    const insertMultiplication = (calculation) => {\r\n        // Regex for implicit multiplication with brackets\r\n        const implicitMultiplication = /(\\d+\\(+(\\-\\d+|\\d+))|(\\)\\()|(\\d+\\)+\\d+)/g;\r\n        let newCalc = calculation;\r\n        while (newCalc.match(implicitMultiplication)) {\r\n            // Insert '*' into expressions like this: 2(2) = 4, or 2(-2) = -4, or 2((2)*1) = 4\r\n            newCalc = newCalc.replace(/(\\d+)(\\(+)(\\-\\d+|\\d+)/g, '$1*$2$3');\r\n\r\n            // Insert '*' into expressions like this: (2)2 = 4, or ((2))2 = 4. (2)-2 should SUBTRACT so it is left alone.\r\n            newCalc = newCalc.replace(/(\\d+)(\\)+)(\\d+)/g, '$1$2*$3');\r\n\r\n            // Insert '*' into expressions like this: (2)(2) = 4\r\n            newCalc = newCalc.replace(/(\\)\\()/g, ')*(');\r\n        }\r\n        return newCalc;\r\n    }\r\n\r\n    const selectBtn = (btnValue) => {\r\n        // Error occurred, overwrite it with whatever we typed in\r\n        if (lastResult.result === 'ERROR' && btnValue !== '=') {\r\n            setLastResult({\r\n                operation: '',\r\n                result: ''\r\n            });\r\n            setDisplayString({\r\n                current: btnValue + '',\r\n                last: ' ',\r\n                displayResult: false\r\n            });\r\n        }\r\n        // User hits equal sign and we have some calculation typed in\r\n        else if (btnValue === '=' && displayString.current.length > 0) {\r\n            const operation = formatCalculation(displayString.current);\r\n            let result;\r\n            try {\r\n                result = eval(operation);\r\n                if (Number.isNaN(result)) {\r\n                    result = 'ERROR'\r\n                }\r\n            } catch (error) {\r\n                result = 'ERROR';\r\n            }\r\n\r\n            setLastResult({\r\n                operation: operation,\r\n                result: result + ''\r\n            });\r\n            setDisplayString({\r\n                current: result + '',\r\n                last: operation + ' = ',\r\n                displayResult: true\r\n            });\r\n        }\r\n        // User hits any key that is not '='\r\n        else if (btnValue !== '=') {\r\n            let newCurrent = displayString.current + btnValue;\r\n            if (displayString.displayResult && !btnValue.match(/^\\*|\\/|\\+|-/)) {\r\n                newCurrent = btnValue;\r\n            }\r\n\r\n            // Don't allow user to add an operation or decimal twice in a row\r\n            if (btnValue.match(/^\\*|\\/|\\+|\\-|\\./) && displayString.current.length > 0 && btnValue === displayString.current.slice(-1)) {\r\n                return;\r\n            }\r\n\r\n            // If we add an operation, and the last character was an operation, then we overwrite it.\r\n            if (btnValue.match(/^\\*|\\/|\\+|\\-/) && displayString.current.match(/(\\*|\\/|\\+|\\-)$/)) {\r\n                newCurrent = displayString.current.slice(0, -1) + btnValue;\r\n            }\r\n\r\n            // If we add an operation after a decimal we need to pad a zero\r\n            if (!btnValue.match(/\\d/) && displayString.current.match(/\\.$/)) {\r\n                newCurrent = displayString.current + '0' + btnValue;\r\n            }\r\n\r\n            setDisplayString({\r\n                current: newCurrent + '',\r\n                last: lastResult.result.length > 0 ? 'Ans = ' + lastResult.result : ' ',\r\n                displayResult: false\r\n            });\r\n        }\r\n    }\r\n\r\n    const clearBtn = () => {\r\n        setDisplayString({\r\n            current: '0',\r\n            last: ' ',\r\n            displayResult: true\r\n        });\r\n        setLastResult({\r\n            operation: '',\r\n            result: '0'\r\n        });\r\n    }\r\n\r\n    const backspaceBtn = () => {\r\n        if (displayString.current.length > 0 && !displayString.displayResult) {\r\n            let newValue = displayString.current.slice(0, -1);\r\n            setDisplayString({\r\n                ...displayString,\r\n                current: newValue.length === 0 ? '0' : newValue + '',\r\n            });\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='calculator'>\r\n            <div className='display-container'>\r\n                <div className='calc-display'>\r\n                    <p className='last-calculation'>{displayString.last}</p>\r\n                    <p className='current-calculation'>{displayString.displayResult ? lastResult.result : displayString.current}</p>\r\n                </div>\r\n            </div>\r\n            <div className=\"btn-row\">\r\n                <CalculatorButton onClick={selectBtn} value='(' />\r\n                <CalculatorButton onClick={selectBtn} value=')' />\r\n                <CalculatorButton onClick={backspaceBtn} value='CE' />\r\n                <CalculatorButton onClick={clearBtn} value='C' />\r\n            </div>\r\n            <div className=\"btn-row\">\r\n                <CalculatorButton onClick={selectBtn} value='1' />\r\n                <CalculatorButton onClick={selectBtn} value='2' />\r\n                <CalculatorButton onClick={selectBtn} value='3' />\r\n                <CalculatorButton onClick={selectBtn} value='+' />\r\n            </div>\r\n            <div className=\"btn-row\">\r\n                <CalculatorButton onClick={selectBtn} value='4' />\r\n                <CalculatorButton onClick={selectBtn} value='5' />\r\n                <CalculatorButton onClick={selectBtn} value='6' />\r\n                <CalculatorButton onClick={selectBtn} value='-' />\r\n            </div>\r\n            <div className=\"btn-row\">\r\n                <CalculatorButton onClick={selectBtn} value='7' />\r\n                <CalculatorButton onClick={selectBtn} value='8' />\r\n                <CalculatorButton onClick={selectBtn} value='9' />\r\n                <CalculatorButton onClick={selectBtn} value='*' />\r\n            </div>\r\n            <div className=\"btn-row\">\r\n                <CalculatorButton onClick={selectBtn} value='0' />\r\n                <CalculatorButton onClick={selectBtn} value='.' />\r\n                <CalculatorButton onClick={selectBtn} value='=' />\r\n                <CalculatorButton onClick={selectBtn} value='/' />\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default Calculator;","import React from 'react';\nimport Calculator from './components/Calculator';\n\nfunction App() {\n  return (\n      <Calculator />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}